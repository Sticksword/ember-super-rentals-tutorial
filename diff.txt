diff --git a/.bowerrc b/.bowerrc
new file mode 100644
index 0000000..959e169
--- /dev/null
+++ b/.bowerrc
@@ -0,0 +1,4 @@
+{
+  "directory": "bower_components",
+  "analytics": false
+}
diff --git a/.eslintrc.js b/.eslintrc.js
index 2873e2f..fbfc364 100644
--- a/.eslintrc.js
+++ b/.eslintrc.js
@@ -1,7 +1,7 @@
 module.exports = {
   root: true,
   parserOptions: {
-    ecmaVersion: 2017,
+    ecmaVersion: 6,
     sourceType: 'module'
   },
   extends: 'eslint:recommended',
diff --git a/.travis.yml b/.travis.yml
index 385f003..640f5e5 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -8,14 +8,17 @@ sudo: false
 cache:
   directories:
     - $HOME/.npm
+    - $HOME/.cache # includes bowers cache
 
 before_install:
   - npm config set spin false
-  - npm install -g phantomjs-prebuilt
+  - npm install -g bower phantomjs-prebuilt
+  - bower --version
   - phantomjs --version
 
 install:
   - npm install
+  - bower install
 
 script:
   - npm test
diff --git a/README.md b/README.md
index 0c28b39..1ed2bbe 100644
--- a/README.md
+++ b/README.md
@@ -1,26 +1,29 @@
-# super-rentals
+# Super-rentals
 
-This README outlines the details of collaborating on this Ember application.
-A short introduction of this app could easily go here.
+[![Deploy](https://www.herokucdn.com/deploy/button.svg)](https://heroku.com/deploy)
+
+Super Rentals is the working repository of the Ember tutorial: https://guides.emberjs.com/v2.9.0/tutorial/ember-cli/
 
 ## Prerequisites
 
 You will need the following things properly installed on your computer.
 
-* [Git](https://git-scm.com/)
-* [Node.js](https://nodejs.org/) (with NPM)
-* [Ember CLI](https://ember-cli.com/)
+* [Git](http://git-scm.com/)
+* [Node.js](http://nodejs.org/) (with npm)
+* [Bower](http://bower.io/)
+* [Ember CLI](http://www.ember-cli.com/)
 * [PhantomJS](http://phantomjs.org/)
 
 ## Installation
 
 * `git clone <repository-url>` this repository
-* `cd super-rentals`
+* change into the new directory
 * `npm install`
+* `bower install`
 
 ## Running / Development
 
-* `ember serve`
+* `ember server`
 * Visit your app at [http://localhost:4200](http://localhost:4200).
 
 ### Code Generators
@@ -44,7 +47,7 @@ Specify what it takes to deploy your app.
 ## Further Reading / Useful Links
 
 * [ember.js](http://emberjs.com/)
-* [ember-cli](https://ember-cli.com/)
+* [ember-cli](http://www.ember-cli.com/)
 * Development Browser Extensions
   * [ember inspector for chrome](https://chrome.google.com/webstore/detail/ember-inspector/bmdblncegkenkacieihfhpjfppoconhi)
   * [ember inspector for firefox](https://addons.mozilla.org/en-US/firefox/addon/ember-inspector/)
diff --git a/app.json b/app.json
new file mode 100644
index 0000000..669cf39
--- /dev/null
+++ b/app.json
@@ -0,0 +1,11 @@
+{
+  "name": "Super Rentals",
+  "description": "Super Rentals is the working repository of the Ember tutorial",
+  "repository": "https://github.com/ember-learn/super-rentals",
+  "keywords": ["ember", "ember.js"],
+  "buildpacks": [
+    {
+      "url": "https://codon-buildpacks.s3.amazonaws.com/buildpacks/heroku/emberjs.tgz"
+    }
+  ]
+}
diff --git a/app/components/list-filter.js b/app/components/list-filter.js
index e5b72da..c44edea 100644
--- a/app/components/list-filter.js
+++ b/app/components/list-filter.js
@@ -6,14 +6,14 @@ export default Ember.Component.extend({
 
   init() {
     this._super(...arguments);
-    this.get('filter')('').then((results) => this.set('results', results));
+    this.get('filter')('').then((allResults) => this.set('results', allResults));
   },
 
   actions: {
     handleFilterEntry() {
       let filterInputValue = this.get('value');
       let filterAction = this.get('filter');
-      filterAction(filterInputValue).then((filterResults) => this.set('results', filterResults));
+      filterAction(filterInputValue).then((filteredResults) => this.set('results', filteredResults));
     }
   }
 
diff --git a/app/helpers/rental-property-type.js b/app/helpers/rental-property-type.js
index 81efb1a..58f53f0 100644
--- a/app/helpers/rental-property-type.js
+++ b/app/helpers/rental-property-type.js
@@ -6,11 +6,10 @@ const communityPropertyTypes = [
   'Apartment'
 ];
 
-export function rentalPropertyType([type]/*, hash*/) {
+export function rentalPropertyType([type]) {
   if (communityPropertyTypes.includes(type)) {
     return 'Community';
   }
-
   return 'Standalone';
 }
 
diff --git a/app/routes/rentals.js b/app/routes/rentals.js
index cdd5757..26d9f31 100644
--- a/app/routes/rentals.js
+++ b/app/routes/rentals.js
@@ -1,5 +1,4 @@
 import Ember from 'ember';
 
 export default Ember.Route.extend({
-
 });
diff --git a/app/services/maps.js b/app/services/maps.js
index 623abf1..17c025c 100644
--- a/app/services/maps.js
+++ b/app/services/maps.js
@@ -28,5 +28,4 @@ export default Ember.Service.extend({
     element.className = 'map';
     return element;
   }
-
 });
diff --git a/app/templates/about.hbs b/app/templates/about.hbs
index b2a59ea..e090853 100644
--- a/app/templates/about.hbs
+++ b/app/templates/about.hbs
@@ -6,7 +6,7 @@
     By building a property rental site, we can simultaneously imagine traveling
     AND building Ember applications.
   </p>
-  {{#link-to 'contact' class="button"}}
-    Contact Us
+  {{#link-to 'index' class="button"}}
+    Get Started!
   {{/link-to}}
 </div>
diff --git a/app/templates/application.hbs b/app/templates/application.hbs
index a860801..eae8acc 100644
--- a/app/templates/application.hbs
+++ b/app/templates/application.hbs
@@ -18,3 +18,4 @@
     {{outlet}}
   </div>
 </div>
+
diff --git a/app/templates/components/list-filter.hbs b/app/templates/components/list-filter.hbs
index f68f7c2..6325390 100644
--- a/app/templates/components/list-filter.hbs
+++ b/app/templates/components/list-filter.hbs
@@ -1,5 +1,2 @@
-{{input value=value
-        key-up=(action 'handleFilterEntry')
-        class="light"
-        placeholder="Filter By City"}}
+{{input value=value key-up=(action 'handleFilterEntry') class="light" placeholder="Filter By City"}}
 {{yield results}}
diff --git a/app/templates/components/rental-listing.hbs b/app/templates/components/rental-listing.hbs
index f78bd3a..9946072 100644
--- a/app/templates/components/rental-listing.hbs
+++ b/app/templates/components/rental-listing.hbs
@@ -3,12 +3,12 @@
     <img src="{{rental.image}}" alt="">
     <small>View Larger</small>
   </a>
-  <h3>{{#link-to "rentals.show" rental}}{{rental.title}}{{/link-to}}</h3>
+  <h3>{{link-to rental.title "rentals.show" rental}}</h3>
   <div class="detail owner">
     <span>Owner:</span> {{rental.owner}}
   </div>
   <div class="detail type">
-    <span>Type:</span> {{rental-property-type rental.type}} - {{ rental.type }}
+    <span>Type:</span> {{rental-property-type rental.type}} - {{rental.type}}
   </div>
   <div class="detail location">
     <span>Location:</span> {{rental.city}}
diff --git a/app/templates/rentals.hbs b/app/templates/rentals.hbs
index 75aea51..3d2f4eb 100644
--- a/app/templates/rentals.hbs
+++ b/app/templates/rentals.hbs
@@ -6,5 +6,4 @@
     About Us
   {{/link-to}}
 </div>
-
-{{ outlet }}
+{{outlet}}
diff --git a/app/templates/rentals/index.hbs b/app/templates/rentals/index.hbs
index 0df87df..c9ab6f7 100644
--- a/app/templates/rentals/index.hbs
+++ b/app/templates/rentals/index.hbs
@@ -1,10 +1,9 @@
 {{#list-filter
-  filter=(action 'filterByCity')
-  as |rentals|}}
+   filter=(action 'filterByCity')
+   as |rentals|}}
   <ul class="results">
     {{#each rentals as |rentalUnit|}}
       <li>{{rental-listing rental=rentalUnit}}</li>
     {{/each}}
   </ul>
 {{/list-filter}}
-{{ outlet }}
diff --git a/app/templates/rentals/show.hbs b/app/templates/rentals/show.hbs
index af8db01..e4f2f80 100644
--- a/app/templates/rentals/show.hbs
+++ b/app/templates/rentals/show.hbs
@@ -13,6 +13,7 @@
     <div class="detail">
       <strong>Number of bedrooms:</strong> {{model.bedrooms}}
     </div>
+    <p>&nbsp;</p>
     <p class="description">{{model.description}}</p>
   </div>
   <img src="{{model.image}}" class="rental-pic">
diff --git a/app/utils/google-maps.js b/app/utils/google-maps.js
index 8ad3eb1..80f3ce4 100644
--- a/app/utils/google-maps.js
+++ b/app/utils/google-maps.js
@@ -17,8 +17,8 @@ export default Ember.Object.extend({
   pinLocation(location, map) {
     this.get('geocoder').geocode({address: location}, (result, status) => {
       if (status === google.maps.GeocoderStatus.OK) {
-        let geometry = result[0].geometry.location;
-        let position = { lat: geometry.lat(), lng: geometry.lng() };
+        let coordinates = result[0].geometry.location;
+        let position = { lat: coordinates.lat(), lng: coordinates.lng() };
         map.setCenter(position);
         new google.maps.Marker({ position, map, title: location });
       }
@@ -26,3 +26,4 @@ export default Ember.Object.extend({
   }
 
 });
+
diff --git a/bower.json b/bower.json
new file mode 100644
index 0000000..e36ccf0
--- /dev/null
+++ b/bower.json
@@ -0,0 +1,7 @@
+{
+  "name": "super-rentals",
+  "dependencies": {
+    "pretender": "~0.10.1",
+    "Faker": "~3.0.0"
+  }
+}
diff --git a/config/environment.js b/config/environment.js
index bf14556..7a243c1 100644
--- a/config/environment.js
+++ b/config/environment.js
@@ -43,7 +43,11 @@ module.exports = function(environment) {
   }
 
   if (environment === 'production') {
-
+    // use mirage in production too since the app will break
+    // if there is no API for Ember Data
+    ENV['ember-cli-mirage'] = {
+      enabled: true
+    }
   }
 
   return ENV;
diff --git a/config/targets.js b/config/targets.js
deleted file mode 100644
index 2bebfac..0000000
--- a/config/targets.js
+++ /dev/null
@@ -1,10 +0,0 @@
-/* eslint-env node */
-
-module.exports = {
-  browsers: [
-    'ie 9',
-    'last 1 Chrome versions',
-    'last 1 Firefox versions',
-    'last 1 Safari versions'
-  ]
-};
diff --git a/ember-cli-build.js b/ember-cli-build.js
index 334339e..c9be049 100644
--- a/ember-cli-build.js
+++ b/ember-cli-build.js
@@ -4,10 +4,6 @@ const EmberApp = require('ember-cli/lib/broccoli/ember-app');
 module.exports = function(defaults) {
   var app = new EmberApp(defaults, {
     // Add options here
-    sourcemaps: {
-      enabled: EmberApp.env() !== 'production',
-      extensions: ['js']
-    }
   });
 
   // Use `app.import` to add additional libraries to the generated
diff --git a/mirage/config.js b/mirage/config.js
index a96bf52..5f265c8 100644
--- a/mirage/config.js
+++ b/mirage/config.js
@@ -1,47 +1,59 @@
 export default function() {
-  this.namespace = '/api';
 
-  let rentals = [{
+  // These comments are here to help you get started. Feel free to delete them.
+
+  /*
+    Config (with defaults).
+
+    Note: these only affect routes defined *after* them!
+   */
+
+  this.namespace = '/api';
+  let rentals = [
+    {
       type: 'rentals',
       id: 'grand-old-mansion',
       attributes: {
-        title: 'Grand Old Mansion',
-        owner: 'Veruca Salt',
-        city: 'San Francisco',
-        type: 'Estate',
+        title: "Grand Old Mansion",
+        owner: "Veruca Salt",
+        city: "San Francisco",
+        type: "Estate",
         bedrooms: 15,
-        image: 'https://upload.wikimedia.org/wikipedia/commons/c/cb/Crane_estate_(5).jpg',
+        image: "https://upload.wikimedia.org/wikipedia/commons/c/cb/Crane_estate_(5).jpg",
         description: "This grand old mansion sits on over 100 acres of rolling hills and dense redwood forests."
       }
-    }, {
+    },
+    {
       type: 'rentals',
       id: 'urban-living',
       attributes: {
-        title: 'Urban Living',
-        owner: 'Mike Teavee',
-        city: 'Seattle',
-        type: 'Condo',
+        title: "Urban Living",
+        owner: "Mike Teavee",
+        city: "Seattle",
+        type: "Condo",
         bedrooms: 1,
-        image: 'https://upload.wikimedia.org/wikipedia/commons/0/0e/Alfonso_13_Highrise_Tegucigalpa.jpg',
+        image: "https://upload.wikimedia.org/wikipedia/commons/0/0e/Alfonso_13_Highrise_Tegucigalpa.jpg",
         description: "A commuters dream. This rental is within walking distance of 2 bus stops and the Metro."
       }
-    }, {
+    },
+    {
       type: 'rentals',
       id: 'downtown-charm',
       attributes: {
-        title: 'Downtown Charm',
-        owner: 'Violet Beauregarde',
-        city: 'Portland',
-        type: 'Apartment',
+        title: "Downtown Charm",
+        owner: "Violet Beauregarde",
+        city: "Portland",
+        type: "Apartment",
         bedrooms: 3,
-        image: 'https://upload.wikimedia.org/wikipedia/commons/f/f7/Wheeldon_Apartment_Building_-_Portland_Oregon.jpg',
+        image: "https://upload.wikimedia.org/wikipedia/commons/f/f7/Wheeldon_Apartment_Building_-_Portland_Oregon.jpg",
         description: "Convenience is at your doorstep with this charming downtown rental. Great restaurants and active night life are within a few feet."
       }
-    }];
+    }
+  ];
 
   this.get('/rentals', function(db, request) {
-    if(request.queryParams.city !== undefined) {
-      let filteredRentals = rentals.filter(function(i) {
+    if (request.queryParams.city !== undefined) {
+      let filteredRentals = rentals.filter(function (i) {
         return i.attributes.city.toLowerCase().indexOf(request.queryParams.city.toLowerCase()) !== -1;
       });
       return { data: filteredRentals };
@@ -50,8 +62,20 @@ export default function() {
     }
   });
 
-  // Find and return the provided rental from our rental list above
   this.get('/rentals/:id', function (db, request) {
     return { data: rentals.find((rental) => request.params.id === rental.id) };
   });
+
+  // this.urlPrefix = '';    // make this `http://localhost:8080`, for example, if your API is on a different server
+  // this.timing = 400;      // delay for each request, automatically set to 0 during testing
+
+  /*
+    Shorthand cheatsheet:
+
+    this.get('/posts');
+    this.post('/posts');
+    this.get('/posts/:id');
+    this.put('/posts/:id'); // or this.patch
+    this.del('/posts/:id');
+  */
 }
diff --git a/mirage/scenarios/default.js b/mirage/scenarios/default.js
index 0d2db8d..adb3af4 100644
--- a/mirage/scenarios/default.js
+++ b/mirage/scenarios/default.js
@@ -3,8 +3,6 @@ export default function(/* server */) {
   /*
     Seed your development database using your factories.
     This data will not be loaded in your tests.
-
-    Make sure to define a factory for each model you want to create.
   */
 
   // server.createList('post', 10);
diff --git a/mirage/serializers/application.js b/mirage/serializers/application.js
deleted file mode 100644
index 6d47a36..0000000
--- a/mirage/serializers/application.js
+++ /dev/null
@@ -1,4 +0,0 @@
-import { JSONAPISerializer } from 'ember-cli-mirage';
-
-export default JSONAPISerializer.extend({
-});
diff --git a/package.json b/package.json
index 07fd445..d774c56 100644
--- a/package.json
+++ b/package.json
@@ -16,27 +16,25 @@
   },
   "devDependencies": {
     "broccoli-asset-rev": "^2.4.5",
-    "ember-ajax": "^3.0.0",
-    "ember-cli": "2.13.0",
-    "ember-cli-app-version": "^3.0.0",
-    "ember-cli-babel": "^6.0.0",
+    "ember-ajax": "^2.4.1",
+    "ember-cli": "2.12.2",
+    "ember-cli-babel": "^6.1.0",
     "ember-cli-dependency-checker": "^1.3.0",
     "ember-cli-eslint": "^3.0.0",
     "ember-cli-htmlbars": "^1.1.1",
-    "ember-cli-htmlbars-inline-precompile": "^0.4.0",
+    "ember-cli-htmlbars-inline-precompile": "^0.4.2",
     "ember-cli-inject-live-reload": "^1.4.1",
     "ember-cli-mirage": "^0.3.1",
-    "ember-cli-qunit": "^4.0.0-beta.1",
-    "ember-cli-shims": "^1.1.0",
+    "ember-cli-qunit": "^3.1.0",
+    "ember-cli-shims": "^1.0.2",
     "ember-cli-sri": "^2.1.0",
     "ember-cli-tutorial-style": "^1.0.1",
     "ember-cli-uglify": "^1.2.0",
-    "ember-data": "^2.13.0",
-    "ember-export-application-global": "^2.0.0",
-    "ember-load-initializers": "^1.0.0",
-    "ember-resolver": "^4.0.0",
-    "ember-source": "~2.13.0",
-    "ember-welcome-page": "^3.0.0",
+    "ember-data": "^2.12.0",
+    "ember-export-application-global": "^1.0.5",
+    "ember-load-initializers": "^0.6.0",
+    "ember-resolver": "^2.0.3",
+    "ember-source": "~2.12.0",
     "loader.js": "^4.2.3"
   },
   "engines": {
diff --git a/testem.json b/testem.json
new file mode 100644
index 0000000..0f35392
--- /dev/null
+++ b/testem.json
@@ -0,0 +1,12 @@
+{
+  "framework": "qunit",
+  "test_page": "tests/index.html?hidepassed",
+  "disable_watching": true,
+  "launch_in_ci": [
+    "PhantomJS"
+  ],
+  "launch_in_dev": [
+    "PhantomJS",
+    "Chrome"
+  ]
+}
diff --git a/tests/acceptance/list-rentals-test.js b/tests/acceptance/list-rentals-test.js
index e60f620..acbfa29 100644
--- a/tests/acceptance/list-rentals-test.js
+++ b/tests/acceptance/list-rentals-test.js
@@ -10,47 +10,48 @@ let StubMapsService = Ember.Service.extend({
 
 moduleForAcceptance('Acceptance | list rentals', {
   beforeEach() {
-    this.application.register('service:stubMaps', StubMapsService);
-    this.application.inject('component:location-map', 'maps', 'service:stubMaps');
+    this.application.register('service:mockMaps', StubMapsService);
+    this.application.inject('component:location-map', 'maps', 'service:mockMaps');
   }
 });
 
-test('should show rentals as the home page', function (assert) {
+test('should redirect to rentals route', function (assert) {
   visit('/');
   andThen(function() {
     assert.equal(currentURL(), '/rentals', 'should redirect automatically');
   });
 });
 
-test('should link to information about the company.', function (assert) {
+
+test('should link to about page', function (assert) {
   visit('/');
   click('a:contains("About")');
-  andThen(function() {
+  andThen(function () {
     assert.equal(currentURL(), '/about', 'should navigate to about');
   });
 });
 
-test('should link to contact information', function (assert) {
+test('should link to contacts page', function (assert) {
   visit('/');
   click('a:contains("Contact")');
-  andThen(function() {
+  andThen(function () {
     assert.equal(currentURL(), '/contact', 'should navigate to contact');
   });
 });
 
-test('should list available rentals.', function (assert) {
+test('should initially list 3 rentals', function (assert) {
   visit('/');
-  andThen(function() {
-    assert.equal(find('.listing').length, 3, 'should see 3 listings');
+  andThen(function () {
+    assert.equal(find('.results .listing').length, 3, 'should display 3 listings');
   });
 });
 
-test('should filter the list of rentals by city.', function (assert) {
+test('should list 1 rental when filtering by Seattle', function (assert) {
   visit('/');
-  fillIn('.list-filter input', 'Seattle');
+  fillIn('.list-filter input', 'seattle');
   keyEvent('.list-filter input', 'keyup', 69);
-  andThen(function() {
-    assert.equal(find('.listing').length, 1, 'should show 1 listing');
+  andThen(function () {
+    assert.equal(find('.results .listing').length, 1, 'should display 1 listing');
     assert.equal(find('.listing .location:contains("Seattle")').length, 1, 'should contain 1 listing with location Seattle');
   });
 });
@@ -59,7 +60,7 @@ test('should show details for a specific rental', function (assert) {
   visit('/rentals');
   click('a:contains("Grand Old Mansion")');
   andThen(function() {
-    assert.equal(currentURL(), '/rentals/grand-old-mansion', 'should navigate to show route');
+    assert.equal(currentURL(), '/rentals/grand-old-mansion', "should navigate to show route");
     assert.equal(find('.show-listing h2').text(), "Grand Old Mansion", 'should list rental title');
     assert.equal(find('.description').length, 1, 'should list a description of the property');
   });
diff --git a/tests/helpers/destroy-app.js b/tests/helpers/destroy-app.js
index ebbacb1..c3d4d1a 100644
--- a/tests/helpers/destroy-app.js
+++ b/tests/helpers/destroy-app.js
@@ -2,7 +2,4 @@ import Ember from 'ember';
 
 export default function destroyApp(application) {
   Ember.run(application, 'destroy');
-  if(window.server) {
-    window.server.shutdown();
-  }
 }
diff --git a/tests/helpers/setup-mirage-for-unit-test.js b/tests/helpers/setup-mirage-for-unit-test.js
new file mode 100644
index 0000000..c9bc6dd
--- /dev/null
+++ b/tests/helpers/setup-mirage-for-unit-test.js
@@ -0,0 +1,5 @@
+import mirageInitializer from '../../initializers/ember-cli-mirage';
+
+export default function startMirage(container) {
+  mirageInitializer.initialize(container);
+}
diff --git a/tests/index.html b/tests/index.html
index a3f5885..276761d 100644
--- a/tests/index.html
+++ b/tests/index.html
@@ -26,6 +26,7 @@
     <script src="{{rootURL}}assets/test-support.js"></script>
     <script src="{{rootURL}}assets/super-rentals.js"></script>
     <script src="{{rootURL}}assets/tests.js"></script>
+    <script src="https://maps.googleapis.com/maps/api/js?v=3.22"></script>
 
     {{content-for "body-footer"}}
     {{content-for "test-body-footer"}}
diff --git a/tests/integration/components/list-filter-test.js b/tests/integration/components/list-filter-test.js
index b1d11f9..767e924 100644
--- a/tests/integration/components/list-filter-test.js
+++ b/tests/integration/components/list-filter-test.js
@@ -1,33 +1,26 @@
 import { moduleForComponent, test } from 'ember-qunit';
 import hbs from 'htmlbars-inline-precompile';
-import wait from 'ember-test-helpers/wait';
 import RSVP from 'rsvp';
+import wait from 'ember-test-helpers/wait';
 
-const ITEMS = [{city: 'San Francisco'}, {city: 'Portland'}, {city: 'Seattle'}];
-const FILTERED_ITEMS = [{city: 'San Francisco'}];
-
-moduleForComponent('list-filter', 'Integration | Component | filter listing', {
+moduleForComponent('list-filter', 'Integration | Component | list filter', {
   integration: true
 });
 
+const ITEMS = [{city: 'San Francisco'}, {city: 'Portland'}, {city: 'Seattle'}];
+const FILTERED_ITEMS = [{city: 'San Francisco'}];
+
 test('should initially load all listings', function (assert) {
-  // we want our actions to return promises,
-  //since they are potentially fetching data asynchronously
+  assert.expect(3);
   this.on('filterByCity', (val) => {
-    if (val === '') {
-      return RSVP.resolve(ITEMS);
-    } else {
-      return RSVP.resolve(FILTERED_ITEMS);
-    }
+    assert.equal(val, '');
+    return RSVP.resolve(ITEMS);
   });
 
-  // with an integration test,
-  // you can set up and use your component in the same way your application
-  // will use it.
   this.render(hbs`
-    {{#list-filter filter=(action 'filterByCity') as |results|}}
+    {{#list-filter filter=(action 'filterByCity') as |rentals|}}
       <ul>
-      {{#each results as |item|}}
+      {{#each rentals as |item|}}
         <li class="city">
           {{item.city}}
         </li>
@@ -40,7 +33,6 @@ test('should initially load all listings', function (assert) {
     assert.equal(this.$('.city').length, 3);
     assert.equal(this.$('.city').first().text().trim(), 'San Francisco');
   });
-
 });
 
 test('should update with matching listings', function (assert) {
@@ -53,9 +45,9 @@ test('should update with matching listings', function (assert) {
   });
 
   this.render(hbs`
-    {{#list-filter filter=(action 'filterByCity') as |results|}}
+    {{#list-filter filter=(action 'filterByCity') as |rentals|}}
       <ul>
-      {{#each results as |item|}}
+      {{#each rentals as |item|}}
         <li class="city">
           {{item.city}}
         </li>
@@ -64,7 +56,6 @@ test('should update with matching listings', function (assert) {
     {{/list-filter}}
   `);
 
-  // The keyup event here should invoke an action that will cause the list to be filtered
   this.$('.list-filter input').val('San').keyup();
 
   return wait().then(() => {
diff --git a/tests/integration/components/location-map-test.js b/tests/integration/components/location-map-test.js
index c6e201b..ebcb265 100644
--- a/tests/integration/components/location-map-test.js
+++ b/tests/integration/components/location-map-test.js
@@ -3,10 +3,9 @@ import hbs from 'htmlbars-inline-precompile';
 import Ember from 'ember';
 
 let StubMapsService = Ember.Service.extend({
+
   getMapElement(location) {
     this.set('calledWithLocation', location);
-    // We create a div here to simulate our maps service,
-    // which will create and then cache the map element
     return document.createElement('div');
   }
 });
@@ -22,6 +21,6 @@ moduleForComponent('location-map', 'Integration | Component | location map', {
 test('should append map element to container element', function(assert) {
   this.set('myLocation', 'New York');
   this.render(hbs`{{location-map location=myLocation}}`);
-  assert.equal(this.$('.map-container').children().length, 1, 'the map element should be put onscreen');
-  assert.equal(this.get('mapsService.calledWithLocation'), 'New York', 'a map of New York should be requested');
+  assert.equal(this.$('.map-container').children().length, 1, 'container should have one child');
+  assert.equal(this.get('mapsService.calledWithLocation'), 'New York', 'should call service with New York');
 });
diff --git a/tests/integration/components/rental-listing-test.js b/tests/integration/components/rental-listing-test.js
index 817be72..f326ffa 100644
--- a/tests/integration/components/rental-listing-test.js
+++ b/tests/integration/components/rental-listing-test.js
@@ -2,41 +2,21 @@ import { moduleForComponent, test } from 'ember-qunit';
 import hbs from 'htmlbars-inline-precompile';
 import Ember from 'ember';
 
-let rental = Ember.Object.create({
-  image: 'fake.png',
-  title: 'test-title',
-  owner: 'test-owner',
-  type: 'test-type',
-  city: 'test-city',
-  bedrooms: 3
-});
-
-let StubMapsService = Ember.Service.extend({
-  getMapElement(location) {
-    this.set('calledWithLocation', location);
-    // We create a div here to simulate our maps service,
-    // which will create and then cache the map element
-    return document.createElement('div');
-  }
-});
-
 moduleForComponent('rental-listing', 'Integration | Component | rental listing', {
-  integration: true,
-  beforeEach() {
-    this.register('service:maps', StubMapsService);
-    this.inject.service('maps', { as: 'mapsService' });
-  }
-});
-
-test('should display rental details', function(assert) {
-  this.set('rentalObj', rental);
-  this.render(hbs`{{rental-listing rental=rentalObj}}`);
-  assert.equal(this.$('.listing h3').text(), 'test-title', 'Title: test-title');
-  assert.equal(this.$('.listing .owner').text().trim(), 'Owner: test-owner');
+  integration: true
 });
 
 test('should toggle wide class on click', function(assert) {
-  this.set('rentalObj', rental);
+  assert.expect(3);
+  let stubRental = Ember.Object.create({
+    image: 'fake.png',
+    title: 'test-title',
+    owner: 'test-owner',
+    type: 'test-type',
+    city: 'test-city',
+    bedrooms: 3
+  });
+  this.set('rentalObj', stubRental);
   this.render(hbs`{{rental-listing rental=rentalObj}}`);
   assert.equal(this.$('.image.wide').length, 0, 'initially rendered small');
   this.$('.image').click();
diff --git a/tests/integration/helpers/rental-property-type-test.js b/tests/integration/helpers/rental-property-type-test.js
deleted file mode 100644
index abf8cf0..0000000
--- a/tests/integration/helpers/rental-property-type-test.js
+++ /dev/null
@@ -1,16 +0,0 @@
-
-import { moduleForComponent, test } from 'ember-qunit';
-import hbs from 'htmlbars-inline-precompile';
-
-moduleForComponent('rental-property-type', 'helper:rental-property-type', {
-  integration: true
-});
-
-// Replace this with your real tests.
-test('it renders', function(assert) {
-  this.set('inputValue', '1234');
-
-  this.render(hbs`{{rental-property-type inputValue}}`);
-
-  assert.equal(this.$().text().trim(), 'Standalone');
-});
diff --git a/tests/test-helper.js b/tests/test-helper.js
index f219659..e6cfb70 100644
--- a/tests/test-helper.js
+++ b/tests/test-helper.js
@@ -2,7 +2,5 @@ import resolver from './helpers/resolver';
 import {
   setResolver
 } from 'ember-qunit';
-import { start } from 'ember-cli-qunit';
 
 setResolver(resolver);
-start();
diff --git a/tests/unit/controllers/rentals-test.js b/tests/unit/controllers/rentals-test.js
deleted file mode 100644
index ed0c40b..0000000
--- a/tests/unit/controllers/rentals-test.js
+++ /dev/null
@@ -1,12 +0,0 @@
-import { moduleFor, test } from 'ember-qunit';
-
-moduleFor('controller:rentals', 'Unit | Controller | rentals', {
-  // Specify the other units that are required for this test.
-  // needs: ['controller:foo']
-});
-
-// Replace this with your real tests.
-test('it exists', function(assert) {
-  let controller = this.subject();
-  assert.ok(controller);
-});
diff --git a/tests/unit/models/rental-test.js b/tests/unit/models/rental-test.js
index 543b2b7..917e56f 100644
--- a/tests/unit/models/rental-test.js
+++ b/tests/unit/models/rental-test.js
@@ -7,6 +7,6 @@ moduleForModel('rental', 'Unit | Model | rental', {
 
 test('it exists', function(assert) {
   let model = this.subject();
-  // let store = this.store();
+  // let store = this.get('store')();
   assert.ok(!!model);
 });
diff --git a/tests/unit/routes/index-test.js b/tests/unit/routes/index-test.js
index 5d0f50d..e36af81 100644
--- a/tests/unit/routes/index-test.js
+++ b/tests/unit/routes/index-test.js
@@ -1,11 +1,12 @@
 import { moduleFor, test } from 'ember-qunit';
 
-moduleFor('route:index', 'Unit | Route | index', {
-  // Specify the other units that are required for this test.
-  // needs: ['controller:foo']
-});
+moduleFor('route:index', 'Unit | Route | index');
 
-test('it exists', function(assert) {
-  let route = this.subject();
-  assert.ok(route);
+test('should transition to rentals route', function(assert) {
+  let route = this.subject({
+    replaceWith(routeName) {
+      assert.equal(routeName, 'rentals', 'transition to route name rentals');
+    }
+  });
+  route.beforeModel();
 });
diff --git a/tests/unit/routes/rentals/index-test.js b/tests/unit/routes/rentals/index-test.js
index 243bb29..66cda15 100644
--- a/tests/unit/routes/rentals/index-test.js
+++ b/tests/unit/routes/rentals/index-test.js
@@ -1,11 +1,24 @@
 import { moduleFor, test } from 'ember-qunit';
+import startMirage from '../../../helpers/setup-mirage-for-unit-test';
+import Ember from 'ember';
 
 moduleFor('route:rentals/index', 'Unit | Route | rentals/index', {
-  // Specify the other units that are required for this test.
-  // needs: ['controller:foo']
+  needs: ['model:rental',
+         'adapter:application'],
+  beforeEach() {
+    startMirage(this.container);
+  },
+  afterEach() {
+    window.server.shutdown();
+  }
 });
 
-test('it exists', function(assert) {
+test('should load all rentals', function(assert) {
   let route = this.subject();
-  assert.ok(route);
+  return Ember.run(() => {
+    return route.model().then((results) => {
+      assert.equal(results.get('length'), 3);
+    });
+  });
+
 });
diff --git a/tests/unit/routes/rentals/show-test.js b/tests/unit/routes/rentals/show-test.js
index 97840a0..570c5c8 100644
--- a/tests/unit/routes/rentals/show-test.js
+++ b/tests/unit/routes/rentals/show-test.js
@@ -1,11 +1,23 @@
+import Ember from 'ember';
 import { moduleFor, test } from 'ember-qunit';
+import startMirage from '../../../helpers/setup-mirage-for-unit-test';
 
 moduleFor('route:rentals/show', 'Unit | Route | rentals/show', {
-  // Specify the other units that are required for this test.
-  // needs: ['controller:foo']
+  needs: ['model:rental',
+         'adapter:application'],
+  beforeEach() {
+    startMirage(this.container);
+  },
+  afterEach() {
+    window.server.shutdown();
+  }
 });
 
-test('it exists', function(assert) {
+test('should load rental by id', function(assert) {
   let route = this.subject();
-  assert.ok(route);
+  return Ember.run(() => {
+    return route.model({ rental_id: 'grand-old-mansion'}).then((result) => {
+      assert.equal(result.get('title'), "Grand Old Mansion");
+    });
+  });
 });
